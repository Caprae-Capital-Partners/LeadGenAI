import requests
import pandas as pd
import time
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class CompanyInfoRetriever:
    def __init__(self, hunter_api_key=None):
        """Initialize with your Hunter.io API key."""
        self.hunter_api_key = hunter_api_key or os.getenv("HUNTER_API_KEY")
        if not self.hunter_api_key:
            raise ValueError("Hunter.io API key is required. Set it as HUNTER_API_KEY environment variable or pass it directly.")
    
    def get_company_domain(self, company_name):
        """Use Hunter.io to find a company's domain name."""
        url = "https://api.hunter.io/v2/domain-search"
        params = {
            "company": company_name,
            "api_key": self.hunter_api_key,
            "limit": 1
        }
        
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                if data.get('data', {}).get('domain'):
                    return data['data']['domain']
            return None
        except Exception as e:
            print(f"Error finding domain for {company_name}: {str(e)}")
            return None
    
    def find_company_emails(self, domain, seniority=None):
        """Find email addresses at a company with optional seniority filter."""
        if not domain:
            return []
            
        url = "https://api.hunter.io/v2/domain-search"
        params = {
            "domain": domain,
            "api_key": self.hunter_api_key,
            "limit": 10  # Increase if needed, but consider API limits
        }
        
        if seniority:
            params["seniority"] = seniority
            
        try:
            response = requests.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                return data.get('data', {}).get('emails', [])
            return []
        except Exception as e:
            print(f"Error finding emails for {domain}: {str(e)}")
            return []
    
    def extract_ceo_info(self, emails):
        """Extract CEO information from a list of email data objects."""
        if not emails:
            return None
            
        # First look for CEO title
        for email in emails:
            position = email.get('position', '').lower()
            if position and ('ceo' in position or 'chief executive officer' in position or 
                            ('founder' in position and 'chief' in position)):
                return {
                    'name': f"{email.get('first_name', '')} {email.get('last_name', '')}".strip(),
                    'email': email.get('value'),
                    'position': email.get('position'),
                    'linkedin': email.get('linkedin')
                }
        
        # If no CEO found but there's a founder
        for email in emails:
            position = email.get('position', '').lower()
            if position and ('founder' in position or 'owner' in position or 'president' in position):
                return {
                    'name': f"{email.get('first_name', '')} {email.get('last_name', '')}".strip(),
                    'email': email.get('value'),
                    'position': email.get('position'),
                    'linkedin': email.get('linkedin')
                }
        
        # If no specific position found, take the first senior person
        for email in emails:
            if email.get('seniority') == 'executive':
                return {
                    'name': f"{email.get('first_name', '')} {email.get('last_name', '')}".strip(),
                    'email': email.get('value'),
                    'position': email.get('position'),
                    'linkedin': email.get('linkedin')
                }
        
        # Fall back to first result if nothing else
        if emails:
            return {
                'name': f"{emails[0].get('first_name', '')} {emails[0].get('last_name', '')}".strip(),
                'email': emails[0].get('value'),
                'position': emails[0].get('position', 'Unknown'),
                'linkedin': emails[0].get('linkedin')
            }
            
        return None
    
    def get_company_ceo_info(self, company_name):
        """Get CEO information for a given company."""
        result = {
            "company_name": company_name,
            "domain": None,
            "ceo_name": None,
            "ceo_position": None,
            "ceo_email": None,
            "ceo_linkedin": None,
            "status": "Processing"
        }
        
        # Step 1: Find company domain
        domain = self.get_company_domain(company_name)
        if not domain:
            result["status"] = "Company domain not found"
            return result
            
        result["domain"] = domain
        
        # Step 2: Find company emails (try executive seniority first)
        emails = self.find_company_emails(domain, seniority="executive")
        if not emails:
            # Try without seniority filter
            emails = self.find_company_emails(domain)
            
        # Step 3: Extract CEO information
        ceo_info = self.extract_ceo_info(emails)
        if not ceo_info:
            result["status"] = "No executives found"
            return result
            
        # Step 4: Populate result
        result["ceo_name"] = ceo_info.get('name')
        result["ceo_position"] = ceo_info.get('position')
        result["ceo_email"] = ceo_info.get('email')
        result["ceo_linkedin"] = ceo_info.get('linkedin')
        result["status"] = "Success"
        
        return result

def main():
    # List of companies to search
    companies = [
        "Lumious", 
        "Kwik Brain",
        "Quimbee",
        "Canopy Ed",
        "CustomGuide",
        "AdaptedMind", 
        "SafetySkills",
        "Digital Marketer",
        "Explore Learning",
        "Lawline",
        "Instructing.com"
    ]
    
    # Create the retriever
    api_key = "4c079a55cab715a7195e9426d8b53840ee087e91"
    retriever = CompanyInfoRetriever(api_key)
    
    # Process each company
    results = []
    for company in companies:
        print(f"Processing {company}...")
        result = retriever.get_company_ceo_info(company)
        results.append(result)
        time.sleep(2)  # Rate limiting to avoid hitting API limits
    
    # Convert to DataFrame and save to CSV
    df = pd.DataFrame(results)
    df.to_csv("company_ceo_data.csv", index=False)
    print(f"Data saved to company_ceo_data.csv")
    print(f"Used {len(companies)} out of 25 free monthly searches.")

if __name__ == "__main__":
    main()