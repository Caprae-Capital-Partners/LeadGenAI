# /etc/nginx/conf.d/default.conf

# 1) Build a variable $cors_origin that equals the request’s Origin
#    but only if it matches one of our two allowed hosts.
map $http_origin $cors_origin {
    default "";
    "https://www.saasquatchleads.com" $http_origin;
    "https://saasquatchleads.com"     $http_origin;
    "https://main.d2fzqm2i2qb7f3.amplifyapp.com" $http_origin;
}


server {
    listen 80;
    server_name api.capraeleadseekers.site;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name api.capraeleadseekers.site;

    ssl_certificate     /etc/letsencrypt/live/api.capraeleadseekers.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.capraeleadseekers.site/privkey.pem;

    # timeouts, buffering etc...
    proxy_connect_timeout  2800s;
    proxy_read_timeout     2800s;
    proxy_send_timeout     2800s;
    send_timeout           2800s;
    client_body_timeout    2800s;
    client_header_timeout  2800s;
    proxy_buffering        off;
    proxy_request_buffering off;

    # Health check
    location = /api/health {
        proxy_pass         http://backend:5050/health;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    # Phase 2 (Flask) → /api/*
    location /api/ {
        # 2a) OPTIONS preflight
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin   $cors_origin always;
            add_header Access-Control-Allow-Methods  "GET, POST, OPTIONS"   always;
            add_header Access-Control-Allow-Headers  "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age        86400                  always;
            add_header Content-Length                0                      always;
            add_header Content-Type                  text/plain             always;
            return 204;
        }

        # 2b) Actual proxy
        proxy_pass         http://backend:5050;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

        add_header Access-Control-Allow-Origin  $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Vary                       Origin      always;
    }

    # Phase 1 (Quart) → /scraper/*
    location /scraper/ {
        # 3a) OPTIONS preflight
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin   $cors_origin always;
            add_header Access-Control-Allow-Methods  "GET, POST, OPTIONS"   always;
            add_header Access-Control-Allow-Headers  "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials true always; 
            add_header Access-Control-Max-Age        86400                  always;
            add_header Content-Length                0                      always;
            add_header Content-Type                  text/plain             always;
            return 204;
        }

        # 3b) Actual proxy
        proxy_pass         http://scraper:5050/api/;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

        add_header Access-Control-Allow-Origin  $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;   
        add_header Vary                       Origin      always;
    }
}
